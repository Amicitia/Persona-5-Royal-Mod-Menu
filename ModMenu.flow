// Import the MessageScript into the script
// The compiler will insert constant variables for each of the 
// window identifiers.
import( "ModMenu.msg" );
import( "Math.flow" );
import( "Utilities.flow" );

// Store this for animating the last spawned npc
global int gLastSpawnedNpcModelHandle;
global int gFldAnimGapId;
global int gFldAnimGapIndex;
global float gFldAnimSpeed;
global bool gFldAnimShouldLoop;
global int gNpcAnimGapId;
global int gNpcAnimGapIndex;
global int gFldAnimTime;
global float gLastCamXRot;
global float gLastCamYRot;
global float gLastCamZRot;
global int gFieldMajor;
global int gFieldMinor;
global int gEventMajor;
global int gEventMinor;

void ModMenuDisplay()
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(-1, ModMenu);
		
		switch ( selection )
		{
			case 0:
				return;
			case 1:
				PlayerEditorDisplay();
				break;
			case 2:
				BossSelectMenuDisplay();
				return;
			case 3: 
				TeleportModeStart();
				break;
			case 4: 
				BgmSelect();
				break;
			case 5:
				FieldSelect();
				return;
			case 6:
				EventSelect();
				return;
			case 7:
				CameraEditorDisplay(); 
				break;
			case 8:
				NpcControlMenuDisplay(); 
				break;
			case 9: 
				FlagsEditorDisplay(); 
				break;
			case 10: 
				CalendarEditorDisplay(); 
				return;
			case 11: 
				CallOriginalSquareMenu();
				break;
			case 12:
				AboutDialogDisplay(); 
				break;
		}
	}
}


// Player Editor
void PlayerEditorDisplay()
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(PlayerMenuName, PlayerMenu);
		switch ( selection )
		{
			case 0:
				return;
			case 1:
				PersonaEditorOpen();
				break;
			case 2:
				StatEditorDisplay();
				break;
			case 3: 
				ItemEditorDisplay();
				break;
			case 4:
				CommuSetRankSelect();
				break;
			case 5: // Set Protag Name
				CALL_NAME_ENTRY();
				break;
			case 6: // Set Team Name
				CALL_PHANTOM_NAME_ENTRY();
				break;
			case 7:
				PlayerAnimViewerDisplay();
				break;
			case 8:
				PlayerSelectModelScale();
				break;
			case 9: 
				PlayerSetMaxMoney();
				break;
		}
	}
}

// Persona Stock Editor
void PersonaEditorOpen() 
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(PersonaMenuName, PersonaMenu);
	
		switch (selection)
		{
			case 0:
				return;
			case 1:
				PersonaAddSelect();
				break;
			case 2:
				PersonaDeleteAllSelect();
				break;
			case 3:
				PersonaAddSkillSelect();
				break;
		}
	}
}

void PersonaAddSelect()
{
	int personaId = SelectNumberPrompt( PersonaAddPrompt, 3 );
    
    if ( personaId < 0 )
        return;
    
    ADD_PERSONA_STOCK( personaId );
    MSG_SYSTEM(PersonaAdded);
}

void PersonaDeleteAllSelect()
{
	bool deleteConfirm = SelectPrompt( PersonaDelPrompt, PersonaDelSelect );
	
	if ( deleteConfirm ) {
		CLEAR_PERSONA_STOCK();
		MSG_SYSTEM(PersonaDeleted);
	}
	
}

void PersonaAddSkillSelect()
{
    SEL_MASK(1);
    
	int unitId = SEL_GENERIC(UnitMenuName, UnitSelect) + 1;
    if ( unitId <= 0 ) // Cancel
        return;
        
	int skillId = SelectNumberPrompt( SkillPrompt, 3 );
    if ( skillId < 0 ) // Cancel
        return;
        
	SKILL_ADD( unitId, skillId );
	FADEIN( 0, 10 );
	FADE_SYNC();
	FLD_REQ_FLASHBACK( 152, 51 );
	FLD_END_FLASHBACK();
}

// Stat Editor
void StatEditorDisplay()
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(StatsMenuName, StatsMenu);
        
        if (selection < 0)
            return;
        
		int pointsToAdd = SelectNumberPrompt( StatPrompt, 2 );
        
        if (pointsToAdd < 0)
            continue;

		switch ( selection )
		{
			case 0:
				return;
			case 1: // Knowledge
				StatAddPointAndDisplay( pointsToAdd, 0, 0, 0, 0 );
				break;
			case 2: // Charm
				StatAddPointAndDisplay( 0, pointsToAdd, 0, 0, 0 );
				break;
			case 3: // Proficiency
				StatAddPointAndDisplay( 0, 0, pointsToAdd, 0, 0 );
				break;
			case 4: // Guts
				StatAddPointAndDisplay( 0, 0, 0, pointsToAdd, 0 );
				break;
			case 5: // Kindness
				StatAddPointAndDisplay( 0, 0, 0, 0, pointsToAdd );
				break;
		}
	}
}

void StatAddPointAndDisplay( int p1, int p2, int p3, int p4, int p5 )
{
	ADD_PC_ALL_PARAM( p1, p2, p3, p4, p5 );
	DISP_PC_PARAM_METER();
}

// Item Editor
void ItemEditorDisplay() 
{
	while ( true )
	{
		SEL_MASK(1);
		int itemType = SEL_GENERIC(ItemMenuName, ItemMenu);
	
		switch ( itemType ) 
		{
			case 0:
				return;
			case 1: // Consumables
				ItemGetSelect( 12288 );
				break;
			case 2: // Accessories
				ItemGetSelect( 0x2000 );
				break;
			case 3: // Key Items
				ItemGetSelect( 0x4000 );
				break;
			case 4: // Ranged Weapon
				ItemGetSelect( 0x8000 );
				break;
			case 5: // Melee Weapons
				MSG_SYSTEM(MeleeError);
				break;
			case 6: // Outfits
				ItemGetSelect( 0x7000 );
				break;
			case 7: // Armor
				ItemGetSelect( 0x1000 );
				break;
			case 8: // Materials
				ItemGetSelect( 0x5000 );
				break;
			case 9: // Skill Cards
				ItemGetSelect( 24576 );
				break;
		}
	}
}

void ItemGetSelect( int type ) 
{
	int itemId = SelectNumberPrompt( ItemPrompt, 4 );
    if (itemId < 0)
        return;
	int amount = SelectNumberPrompt( ItemPrompt2, 2 );
    if (amount < 0)
        return;
	
	GET_ITEM_BUF_RESET();
	GET_ITEM_BUF_SET( type + itemId, amount );
	SET_ITEM_NUM( type + itemId, GET_ITEM_NUM( type + itemId ) + amount );
	GET_ITEMS_WINDOW( 0 );
}

void CommuSetRankSelect()
{
	SEL_MASK(1);
	int cmmId = SEL_GENERIC(CommuMenuName, CommuMenu);
	
	if (cmmId < 22 && cmmId > 0) {
		DisplayMessagePrompt( CmmDialog2 );
        SEL_MASK(1);
		int lvl = SEL_GENERIC(-1, OneThruTen);
        
        if (lvl > 0) {
            CMM_RANKUP( cmmId, lvl, 1 );
            
            if ( !CMM_EXIST( cmmId ) ) {
                CMM_OPEN( cmmId );
            }
            
            CMM_SET_LV( cmmId, lvl );
            CMM_ADD_POINT( cmmId, 9999);
        }
	}
}

void PlayerAnimViewerDisplay()
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC( AnimMenuName, AnimMenu );
	
		switch ( selection )
		{
			case 0:
				return;
			case 1: // Joker Animation Viewer
				FieldModelAnimViewerDisplay(FLD_PC_GET_RESHND( 0 ));
				break;
			case 2: // Morgana Out of Bag
				SUB_MoruShowFace();
				break;
			case 3: // Morgana In Bag
				SUB_MoruReturnBag();
				break;
		}
	}
}

// Field Model Anim Viewer
void FieldModelAnimViewerDisplay(int resHandle) 
{
	while ( true )
	{	
		SEL_MASK(1);
		int selection = SEL_GENERIC(GAPMenuName, GAPMenu);
		
		switch (selection)
		{
			case 0:
				return;
			case 1:
				FieldModelAnimSelectId();
				break;
			case 2:
				FieldModelAnimSelectIndex();
				break;
			case 3:
				FieldModelAnimSelectLoop();
				break;
			case 4:
				FieldModelAnimSelectSpeed();
				break;
			case 5:
				FieldModelAnimSelectTime();
				break;
			case 6:
				FieldModelPlayAnim(resHandle, gFldAnimGapId, gFldAnimGapIndex);
				break;
		}	
	}
}

void FieldModelPlayAnim(int resHandle, int gapid, int index) 
{
	int clone = FLD_MODEL_CLONE_ADDMOTION( resHandle, gapid );
	FLD_UNIT_WAIT_DISABLE( clone );
	MDL_ANIM( clone, index, gFldAnimShouldLoop, 0, gFldAnimSpeed );
	WAIT(gFldAnimTime);
	FLD_MODEL_REVERT_ADDMOTION( resHandle, clone );
    //FLD_UNIT_SET_WAIT( resHandle );
}

void FieldModelAnimSelectId()
{
    int temp = SelectNumberPrompt( GapPrompt, 3 ); // Gap filename last 3 digits
    if (temp >= 0)
        gFldAnimGapId = temp;
}

void FieldModelAnimSelectIndex()
{
    int temp = SelectNumberPrompt( GapPrompt2, 2 );
    if (temp >= 0)
        gFldAnimGapIndex = temp;
}

void FieldModelAnimSelectLoop()
{
	gFldAnimShouldLoop = SelectPrompt( GapPrompt3, SelectionDialogAnimLoop );
}

void FieldModelAnimSelectSpeed() 
{
    float temp = SelectFloatPrompt( GapPrompt5, 2 );
    if (temp >= 0)
        gFldAnimSpeed = temp / 10;
}

void FieldModelAnimSelectTime() 
{
    int temp = SelectNumberPrompt( GapPrompt6, 1 );
    if (temp >= 0)
        gFldAnimTime = temp * 30;
}

void PlayerSelectModelScale() 
{
    float temp = SelectFloatPrompt( ScalePrompt, 2 );
    if (temp >= 0)
	{
        float modelScale = temp / 10;
        FLD_MODEL_SET_SCALE(FLD_PC_GET_RESHND( 0 ), modelScale);
    }
}

// Camera Editor
void CameraEditorDisplay()
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(CameraMenuName, CameraMenu);
	
		switch ( selection )
		{
			case 0:
				return;
			case 1:
				CameraInputPos();
				break;
			case 2:
				CameraInputFov();
				break;
			case 3:
				CameraInputRot();
				break;
			case 4:
				CameraUnlock();
				break;
			case 5:
				CameraLock();
				break;
		}
	}
}

void CameraInputPos() 
{
	DisplayMessagePrompt( CameraPrompt );
	
	while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
	{
		bool anyValueSet = false;
		
		if ( PAD_CHK_PRESS( PadButton.Any ) ) // if any button is pressed
		{
			float x = FLD_CAMERA_GET_X_POS();
			float y = FLD_CAMERA_GET_Y_POS();
			float z = FLD_CAMERA_GET_Z_POS();
			float multiplier = 1f;

			if ( PAD_CHK_PRESS( PadButton.Cross ) ) 
				multiplier = 3f;

			if ( PAD_CHK_PRESS( PadButton.Up ) ) 
			{
				y = y + ( 5f * multiplier );
				anyValueSet = true;
			}

			if ( PAD_CHK_PRESS( PadButton.Right ) ) 
			{
				x = x + ( 5f * multiplier );
				anyValueSet = true;
			}

			if ( PAD_CHK_PRESS( PadButton.Down ) ) 
			{
				y = y - ( 5f * multiplier );
				anyValueSet = true;
			}

			if ( PAD_CHK_PRESS( PadButton.Left ) ) 
			{
				x = x - ( 5f * multiplier );
				anyValueSet = true;
			}

			if ( anyValueSet ) 
				FLD_CAMERA_SET_POS( x, y, z );
		}
		
		WAIT( 3 );
	}
}

void CameraInputFov() 
{
	DisplayMessagePrompt( CameraPrompt );
	
	while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
	{
		bool anyValueSet = false;
		
		if ( PAD_CHK_PRESS( PadButton.Any ) )
		{
			float fov = FLD_CAMERA_GET_FOVY();
			float multiplier = 1f;

			if ( PAD_CHK_PRESS( PadButton.Cross ) ) 
				multiplier = 5f;

			if ( PAD_CHK_PRESS( PadButton.Up ) ) 
			{
				fov = fov + ( 1f * multiplier );
				anyValueSet = true;
			}

			if ( PAD_CHK_PRESS( PadButton.Right ) ) 
			{
				fov = fov + ( 1f * multiplier );
				anyValueSet = true;
			}

			if ( PAD_CHK_PRESS( PadButton.Down ) ) 
			{
				fov = fov - ( 1f * multiplier );
				anyValueSet = true;
			}

			if ( PAD_CHK_PRESS( PadButton.Left ) ) 
			{
				fov = fov + ( 1f * multiplier );
				anyValueSet = true;
			}

			if ( anyValueSet ) 
				FLD_CAMERA_SET_FOVY(fov);
		}
		
		WAIT( 3 );
	}
}

void CameraInputRot() 
{
	const float ADD_VELOCITY_PER_PRESS = 15f;
    float cameraVelocityX = 0f;
    float cameraVelocityY = 0f;
    float cameraVelocityZ = 0f;  
	
	if ( ( gLastCamXRot == 0f ) && ( gLastCamYRot == 0f ) && ( gLastCamZRot == 0f ) ) 
	{
		gLastCamXRot = FLD_CAMERA_GET_X_ROT();
		gLastCamYRot = FLD_CAMERA_GET_Y_ROT();
		gLastCamZRot = FLD_CAMERA_GET_Z_ROT();
	}
	
    int runs = 0;

    while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
    {
        if ( ++runs > 4 )
        {
            runs = 0;
            cameraVelocityX /= 2;
            cameraVelocityY /= 2;
            cameraVelocityZ /= 2;
        }
        
        if ( PAD_CHK_PRESS( PadButton.Any ) )
        {
            if ( PAD_CHK_PRESS( PadButton.Up ) ) 
            {
                if ( PAD_CHK_PRESS( PadButton.Square ) )
                    cameraVelocityZ += ADD_VELOCITY_PER_PRESS;
                else
                    cameraVelocityY += ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Right ) ) 
                cameraVelocityX += ADD_VELOCITY_PER_PRESS;

            if ( PAD_CHK_PRESS( PadButton.Down ) ) 
            {
                if ( PAD_CHK_PRESS( PadButton.Square ) )
                    cameraVelocityZ -= ADD_VELOCITY_PER_PRESS;
                else
                    cameraVelocityY -= ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Left ) ) 
                cameraVelocityX -= ADD_VELOCITY_PER_PRESS;
        }
		
        gLastCamXRot += cameraVelocityX;
		gLastCamYRot += cameraVelocityY;
		gLastCamZRot += cameraVelocityZ;
        CameraSetRot( gLastCamXRot, gLastCamYRot, gLastCamZRot );

        SYNC();
    }
}

void CameraSetRot( float x, float y, float z )
{
    float qX;
    float qY;
    float qZ;
    float qW;
    QuaternionFromEulerDegrees( x, y, z, out qX, out qY, out qZ, out qW );

    FLD_CAMERA_SET_ROT( qX, qY, qZ, qW );
}

void CameraUnlock()
{
	FLD_CAMERA_UNLOCK();
	FLD_CAMERA_BEHIND_UNLOCK();
}

void CameraLock()
{
	FLD_CAMERA_LOCK();
	FLD_CAMERA_BEHIND_LOCK();
}

// Npc Model Control
void NpcControlMenuDisplay()
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(SpawnMenuName, SpawnMenu);
	
		switch ( selection )
		{
			case 0:
				return;
			case 1: // Spawn Model
				NpcSpawnSelect();
				break;
			case 2: // Animate Model
				NpcAnimViewerDisplay( gLastSpawnedNpcModelHandle );
				break;
		}
	}
}

void NpcSpawnSelect()
{
	int modelIdMajor = SelectNumberPrompt( NPCPrompt, 4 );
    if (modelIdMajor < 0)
        return;
	int modelIdMinor = SelectNumberPrompt( NPCPrompt2, 3 );
    if (modelIdMinor < 0)
        return;
	int modelIdSub = SelectNumberPrompt( NPCPrompt3, 2 );
    if (modelIdSub < 0)
        return;
	gLastSpawnedNpcModelHandle = NpcSpawn( modelIdMajor, modelIdMinor, modelIdSub );
}

int NpcSpawn( int modelIdMajor, int modelIdMinor, int modelIdSub )
{
	int pcHandle = FLD_PC_GET_RESHND( 0 );
	float x = FLD_MODEL_GET_X_TRANSLATE( pcHandle );
	float y = FLD_MODEL_GET_Y_TRANSLATE( pcHandle );
	float z = FLD_MODEL_GET_Z_TRANSLATE( pcHandle );
	float xr = FLD_MODEL_GET_X_ROTATE( pcHandle );
	float yr = FLD_MODEL_GET_Y_ROTATE( pcHandle );
	float zr = FLD_MODEL_GET_Z_ROTATE( pcHandle );
	
	int npcHandle = FLD_NPC_MODEL_LOAD( modelIdMajor, modelIdMinor, modelIdSub );
	FLD_MODEL_LOADSYNC( npcHandle );
	FLD_MODEL_SET_TRANSLATE( npcHandle, x, y, z, 0 );
	FLD_MODEL_SET_ROTATE( npcHandle, xr, yr, zr, 0 );
	FLD_MODEL_SET_VISIBLE( npcHandle, 1, 0 );
	
	return npcHandle;
}

void NpcAnimViewerDisplay( int resHandle ) 
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(GAPMenuName, GAPMenu);
		
		switch ( selection )
		{ 
			case 0:
				return;
			case 1:
				NpcModelAnimSelectId();
				break;
			case 2:
				NpcModelAnimSelectIndex();
				break;
			case 3:
				FieldModelAnimSelectLoop();
				break;
			case 4:
				FieldModelAnimSelectSpeed();
				break;
			case 5:
				FieldModelAnimSelectTime();
				break;
			case 6:
				FieldModelPlayAnim(resHandle, gNpcAnimGapId, gNpcAnimGapIndex);
				break;
		}
	}
}

void NpcModelAnimSelectId()
{
    int temp = SelectNumberPrompt( GapPrompt, 3 );
    if (temp >= 0)
        gNpcAnimGapId = temp;
}

void NpcModelAnimSelectIndex()
{
    int temp = SelectNumberPrompt( GapPrompt2, 2 );
    if (temp >= 0)
        gNpcAnimGapIndex = temp;
}

// Boss Select
void BossSelectMenuDisplay()
{
    // Select boss
    int bossId = SelectBoss();
    
    if (bossId < 0)
        return;
    
    // Start boss fight
    FLD_START_BOSS( bossId );
}

int SelectBoss()
{
    for ( int i = 0; i < 22; i++ )
	{
		// Print which index we're on
		PUTS( "SelectBoss: index:" );
		PUT( i );
        
		SEL_MASK(1);
		int selection = SEL_GENERIC(-1, i + SelectBoss) - 1;
        
        if (selection < 0)
            return -1;
		
		if ( selection == 4 ) // previous
		{
			// Continue increments i by 1, so to counter that
			// we subtract an additional 1 from i to go to the previous
			// iteration
			
			if ( i != 0 )
				i -= 2;
			else
				i = 20;
			
			continue;
		}
		else if ( selection == 5 ) // next
		{
			continue;
		}
		
		return selection + ( i * 4 ); 
	}
	
	return -1;
}

// Teleport Mode 
void TeleportModeStart()
{
    const float ADD_VELOCITY_PER_PRESS = 5f;
    
    int playerResHandle = FLD_PC_GET_RESHND( 0 );
    
    float playerVelocityX = 0f;
    float playerVelocityY = 0f;
    float playerVelocityZ = 0f;    
    int runs = 0;

    while ( !PAD_CHK_PRESS( PadButton.Triangle ) )
    {
        ++runs;
        if ( runs > 4 )
        {
            runs = 0;
            playerVelocityX /= 2;
            playerVelocityY /= 2;
            playerVelocityZ /= 2;
        }
        
        if ( PAD_CHK_PRESS( PadButton.Any ) )
        {
            if ( PAD_CHK_PRESS( PadButton.Up ) ) 
            {
                if ( PAD_CHK_PRESS( PadButton.Square ) )
                    playerVelocityZ += ADD_VELOCITY_PER_PRESS;
                else
                    playerVelocityY += ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Right ) ) 
            {
                playerVelocityX += ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Down ) ) 
            {
                if ( PAD_CHK_PRESS( PadButton.Square ) )
                    playerVelocityZ -= ADD_VELOCITY_PER_PRESS;
                else
                    playerVelocityY -= ADD_VELOCITY_PER_PRESS;
            }

            if ( PAD_CHK_PRESS( PadButton.Left ) ) 
            {
                playerVelocityX -= ADD_VELOCITY_PER_PRESS;
            }
        }
        
        float x = FLD_MODEL_GET_X_TRANSLATE( playerResHandle ) + playerVelocityX;
        float y = FLD_MODEL_GET_Y_TRANSLATE( playerResHandle ) + playerVelocityY;
        float z = FLD_MODEL_GET_Z_TRANSLATE( playerResHandle ) + playerVelocityZ;        
        FLD_MODEL_RUN_TRANSLATE( playerResHandle, x, y, z );

        SYNC();
    }
}

// BGM Select
void BgmSelect()
{
	// Display the dialog window
	MSG_WND_DSP(); 

	// Display dialog
	MSG( SelectBgmDialog, 0 ); 
	
	// Close the dialog window
	MSG_WND_CLS(); 

	int bgmId = SelectNumber(3);
    if (bgmId < 0)
        return;

	// Play bgm
	BGM( bgmId );
}

// Field Select
void FieldSelect()
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(FieldMenuName, FieldMenu);
		
		switch ( selection )
		{ 
			case 0:
				return;
			case 1:
                int temp = SelectNumberPrompt( FieldDlg, 3 );
                if (temp < 0)
                    break;
				gFieldMajor = temp;
                
				temp = SelectNumberPrompt( FieldDlg2, 3 );
                if (temp < 0)
                    break;
                gFieldMinor = temp;
				break;
			case 2:
				if (gFieldMajor == 0 && gFieldMinor == 0)
					MSG_SYSTEM(LoadCheckError);
				else
					CALL_FIELD( gFieldMajor, gFieldMinor, 0, 0 );
				return;
		}
	}
	
}

// Event Select
void EventSelect() 
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(EventMenuName, EventMenu);
		
		switch ( selection )
		{ 
			case 0:
				return;
			case 1:
                int temp = SelectNumberPrompt( EventDlg, 3 );
                if (temp < 0)
                    break;
				gEventMajor = temp;
                
				temp = SelectNumberPrompt( EventDlg2, 3 );
                if (temp < 0)
                    break;
                gEventMinor = temp;
				break;
			case 2:
				if (gEventMajor == 0 && gEventMinor == 0)
					MSG_SYSTEM(LoadCheckError);
				else
					CALL_EVENT( gEventMajor, gEventMinor);
				return;
		}
	}
}

void PlayerSetMaxMoney() 
{
	GET_MONEY_WINDOW( 999999, 0 );
    CALL_GLOBAL_MONEY_PANEL();
    CHANGE_GLOBAL_MONEY( 999999, 0 );
    DEL_GLOBAL_MONEY_PANEL();
}

// Calendar Editor
void CalendarEditorDisplay() 
{
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC(CalendarMenuName, CalendarMenu);
		
		switch (selection)
		{
			case 0:
				return;
			case 1:
				CalendarSetNextDaySelect();
				break;
			case 2:
				CallCalendar();
				return;
			case 3:
				ChangeWeather();
				break;
		}
	}
}

void CalendarSetNextDaySelect()
{
	int month = SEL_GENERIC_NOT_CANCEL(MonthMenuName, MonthMenu) + 1;
	
	int day = SelectNumberPrompt( CalendarPrompt2, 2 );
	
	if ( day <= 0 )
	{
		// No matter how down you feel on some days, every day is still a positive one.
		MSG_SYSTEM( CalendarError );
		return;
	}
	
	// Verify that the day doesn't exceed the number of possible days in the specified month
	if ( ( ( month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 ) && day >= 32 ) ||
		   ( month == 2 && day >= 30 ) ||
		 ( ( month == 4 || month == 6 || month == 9 || month == 11 ) && day >= 31 )
	   )
	{
		MSG_SYSTEM( CalendarError );
		return;
	}
	
	SET_NEXT_DAY( month, day, 1 );
	PUT( month );
	PUT( day );
}

void CallCalendar()
{
	Fld_FadeOut_CallCalendar();
	CALL_CALENDAR();
}

void ChangeWeather() 
{
	SEL_MASK(1);
	int selection = SEL_GENERIC_NOT_HELP( WeatherMenuName, WeatherMenu );
		
	switch (selection)
	{
		case 0:
			break;
		default:
			PUSH_WEATHER(selection - 1);
			break;
	}
}

// Flags Editor
void FlagsEditorDisplay() 
{
	// Flags start at 0x2D66 in the save file
	// section is 0x460 bytes long
	while ( true )
	{
		SEL_MASK(1);
		int selection = SEL_GENERIC( FlagMenuName, FlagMenu );
		
		switch (selection)
		{
			case 0:
				return;
			case 1:
				SelectHUDDisplayFlag();
				break;
			case 2:
				SelectAddPartyMember();
				break;
			case 3:
				SelectRemovePartyMember();
				break;
			case 4:
				EnablePartyEditing();
				break;
			case 5:
				SelectNavigator();
				break;
			case 6:
				SelectRomanceFlags();
				break;
			case 7:
				RoomEditorDisplay();
				break;
			case 8: // Manual Input
				SelectBitToggle();
				break;
			case 9:
				PrintEnabledBits();
				break;
		}
	}
}

void DisableAllBits() {
	for ( int i = 0; i < 3680; i++ ) {
		BIT_OFF( i );
	}
}

void PrintEnabledBits() {
	for ( int i = 0; i < 3680; i++ ) {
		if (BIT_CHK(i)) {
			PUT(i);
		}
	}
}

void SelectHUDDisplayFlag()
{
	int dateDisplay = SEL_GENERIC(-1, DateDisplayDlg ) - 1;
	int hud = 0;
	
	switch(dateDisplay) {
        case -1:
            return;
		case 0:
			DATE_DISP( 1 );
			FLD_PANEL_DISP(1);
			hud = 1;
			break;
		case 1:
			DATE_DISP( 0 );
			FLD_PANEL_DISP(0);
			hud = 2;
			break;
	}

	MSG_WND_DSP(); 
	
	switch(hud) {
		case 0:
			break;
		case 1:
			MSG_SYSTEM( HudTest1); 
			break;
		case 2:
			MSG_SYSTEM( HudTest2); 
			break;
	}
	
	MSG_WND_CLS();
}

void SelectAddPartyMember()
{
	int unit = SEL_GENERIC_NOT_CANCEL(UnitMenuName, UnitSelect2) + 48;
	BIT_ON( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0100 + unit );
}

void SelectRemovePartyMember()
{
	int unit = SEL_GENERIC_NOT_CANCEL(UnitMenuName, UnitSelect2) + 48;
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0100 + unit );
}

void EnablePartyEditing()
{
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 0);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 1);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 2);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 3);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 4);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 5);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 6);
	BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 0x0103 + 7);
}

void SelectNavigator()
{
	SEL_MASK(1);
	int navi = SEL_GENERIC_NOT_HELP(NaviMenuName, NaviMenu);
	
	switch ( navi ) 
	{
		case 0:
			break;
		case 1: // Morgana
			BIT_ON( 0 + 0x0800 + 0x0800 + 0x1000 + 12 );
			BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 13 );
			break;
		case 2: // Futaba
			BIT_ON( 0 + 0x0800 + 0x0800 + 0x1000 + 13 );
			BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 12 );
			break;
		case 3: // None
			BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 12 );
			BIT_OFF( 0 + 0x0800 + 0x0800 + 0x1000 + 13 );
			break;
	}
}

void SelectRomanceFlags() {
    SEL_MASK(1);
	int lover = SEL_GENERIC_NOT_HELP(LoveMenuName, LoveMenu);
    if (lover < 0)
        return;
    
    lover += (0x0800 + 720);
	SelectItemToggle(lover);
}

void SelectBitToggle()
{
	int id = SelectNumber( 4 );
    if (id < 0)
        return;
    
    SEL_MASK(1);
	int onOff = SEL_GENERIC_NOT_HELP( -1, OnOffSel ) - 1;
    if (onOff < 0)
        return;
	
	switch (onOff) 
	{
		case 0: // On
			BIT_ON( id );
			break;
		case 1: // Off
			BIT_OFF( id );
			break;
	}
}

void SelectItemToggle(int flag) 
{
    SEL_MASK(1);
	int selection = SEL_GENERIC_NOT_HELP( -1, DateDisplayDlg ) - 1;
    if (selection < 0)
        return;
	
	switch (selection) {
		case 0:
			BIT_ON( flag );
			break;
		case 1:
			BIT_OFF( flag );
			break;
	}
}

// Room Editor
void RoomEditorDisplay() 
{
	while ( true )
	{
		SEL_MASK(1);
		int roomSel = SEL_GENERIC_NOT_HELP(-1, RoomEdit );

		switch (roomSel) 
		{
			case 0:
				return;
			case 1:
				FurnitureEditorDisplay();
				break;
			case 2: 
				CollectibleEditorDisplay();
				break;
			case 3: 
				CleanlinessEditorDisplay();
				break;
		}
	}
}

// Furniture Editor
void FurnitureEditorDisplay() 
{
	while ( true )
	{
		SEL_MASK(1);
		int furnSel = SEL_GENERIC_NOT_HELP(-1, FurnEdit );
	
		switch ( furnSel ) 
		{
			case 0:
				return;
			case 1: // Plant
				SelectItemToggle(4230);
				break;
			case 2: // Sayuri
				SelectItemToggle(101);
				break;
			case 3: // DVD Player
				SelectItemToggle(3142);
				break;
			case 4: // Game Console
				SelectItemToggle(3146);
				break;
			case 5: // Old TV Set
				SelectItemToggle(4232);
				break;
			case 6: // Radio
				SelectItemToggle(4233);
				break;
			case 7: // Cat Bed
				SelectItemToggle(8121);
				break;
			case 8: // UFO Game Prizes
				int ufoPrize = SelectNumber(1);
				switch (ufoPrize) 
				{
					case 0: //
						SelectItemToggle(8186);
						break;
					case 1: //
						SelectItemToggle(8187);
						break;
					case 2: //
						SelectItemToggle(8188);
						break;
					case 3: //
						SelectItemToggle(8189);
						break;
					case 4: //
						SelectItemToggle(8190);
						break;
				}
				break;
		}
	}
}

// Collectible Editor
void CollectibleEditorDisplay() 
{
	while ( true )
	{
		SEL_MASK(1);
		int collSel = SEL_GENERIC_NOT_HELP(-1, CollEdit );
	
		switch (collSel) 
		{
			case 0:
				return;
			case 1: // Swan Boat
				SelectItemToggle(3456);
				break;
			case 2: // Ramen
				SelectItemToggle(3457);
				break;
			case 3: // Pennant
				SelectItemToggle(3458);
				break;
			case 4: // Statue
				SelectItemToggle(3459);
				break;
			case 5: // Sky Tree
				SelectItemToggle(3460);
				break;
			case 6: // Big Hera
				SelectItemToggle(3461);
				break;
			case 7: // Shumai
				SelectItemToggle(3462);
				break;
			case 8: // Fusen
				SelectItemToggle(3463);
				break;
			case 9: // I Love
				SelectItemToggle(3464);
				break;
			case 10: // Idol
				SelectItemToggle(3465);
				break;
			case 11: 
				CollectibleEditorDisplay2();
				return;
		}
	}
}

void CollectibleEditorDisplay2() 
{
	while ( true )
	{
		SEL_MASK(1);
		int collectables = SEL_GENERIC_NOT_HELP(-1, CollEdit2 );
	
		switch (collectables) 
		{
			case 0:
				return;
			case 1: // Seiza
				SelectItemToggle(3466);
				break;
			case 2: // Syogi
				SelectItemToggle(3467);
				break;
			case 3: // Hero
				SelectItemToggle(3468);
				break;
			case 4: // Hamaya
				SelectItemToggle(3469);
				break;
			case 5: // Jyainyan
				SelectItemToggle(3470);
				break;
			case 6: // Sushi
				SelectItemToggle(3471);
				break;
			case 7: // Choco
				SelectItemToggle(3472);
				break;
			case 8: // Kumade
				SelectItemToggle(3473);
				break;
		}
	}
}

// Cleanliness Editor
void CleanlinessEditorDisplay() 
{
	while ( true )
	{
		SEL_MASK(1);
		int cleanSel = SEL_GENERIC_NOT_HELP(-1, CleanEdit );
		switch (cleanSel) 
		{
			case 0:
				return;
			case 1: // Bookshelf
				SelectItemToggle(4229);
				break;
			case 2: // Work Bench
				SelectItemToggle(4231);
				break;
			case 3: // Visitors Table
				SelectItemToggle(8176);
				break;
			case 4: // Training Chair
				SelectItemToggle(3144);
				break;
			case 5: // Winter Heater
				SelectItemToggle(8147);
				break;
			case 6: // Laptop
				SelectItemToggle(3237);
				break;
		}
	}
}

// About Dialog
void AboutDialogDisplay() 
{
	DisplayMessagePrompt( AboutDlg );
}
